import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState } from '../../app/store'
import {connectWallet, getConfiguration} from './walletAPI'

type ConnectStatus = 'NOT_INSTALLED' | 'INSTALLED' | 'CONNECTED';
export interface WalletNetworkConfiguration {
    networkAddress: string
    networkName: string
    chainId: string
    networkId: number
    tokenAddress: string
    tokenImage?: string
    mainContractAddress: string
    apiContractAddress: string
}

export interface WalletState {
    account?: string
    status: ConnectStatus
    configuration: WalletNetworkConfiguration
    networkAddress?: string
    networkName?: string
    chainId?: string
}

const initialState: WalletState = {
    status: 'NOT_INSTALLED',
    configuration: {
        networkAddress: 'http://localhost:7545',
        networkName: "Wish Local Network",
        networkId: 5777,
        chainId: '0x539',

        mainContractAddress: '0xbDdE187e79F610e0B82C4952f16Ce4dC8448E56F',
        tokenAddress: '0xfDF3e6477cbcFBd132826320Cdb06bc4B5270a09',
        apiContractAddress: '0x8BE423679ad26397dc969553290b5523C56192Ea'
    }
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const connectToWallet = createAsyncThunk(
    'wallet/connect',
    async () => {
        try {
            return await connectWallet()
        } catch (e) {
            console.error(e)
            throw e
        }
    }
)

export const initConfiguration = createAsyncThunk('wallet/init', async () => {
    return await getConfiguration()
})

export const walletSlice = createSlice({
    name: 'wallet',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setStatus: (state, action: PayloadAction<ConnectStatus>) => {
            state.status = action.payload
        },
        setAccount: (state, action: PayloadAction<string>) => {
            state.account = action.payload
        },
        setChainId: (state, action: PayloadAction<string>) => {
            state.chainId = action.payload
        },
        resetConnectState: (state, action: PayloadAction<any>) => {
            state.account = undefined
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
    },
})
export const {setAccount, setStatus, setChainId} = walletSlice.actions


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectWallet = (state: AppState) => state.wallet



export default walletSlice.reducer
