import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState } from '../../app/store'
import { connectWallet } from './walletAPI'
import Web3 from "web3";

export interface WalletState {
    web3?: Web3
    account?: string
    status: 'none' | 'loading' | 'connected' | 'failed'
}

const initialState: WalletState = {
    status: 'none'
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const connectToWallet = createAsyncThunk(
    'wallet/connect',
    async () => {
        return await connectWallet()
    }
)

export const walletSlice = createSlice({
    name: 'wallet',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(connectToWallet.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(connectToWallet.fulfilled, (state, action) => {
                state.status = 'connected'
                state.web3 = action.payload
            })
            .addCase(connectToWallet.rejected, (state) => {
                state.status = 'connected'
                state.web3 = undefined
            })
    },
})

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectWallet = (state: AppState) => state.wallet.web3



export default walletSlice.reducer
